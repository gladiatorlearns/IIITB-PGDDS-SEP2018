Introduction

So far you’ve learned how to change a table structure. You learned the use of alter table command and the use of add, drop and set commands.

 
In this session

You’ll be introduced to the concept of windowing functions. You’ll learn about the use of over clause, used to implement windowing. You’ll also learn about the concept of frames and how the frames move within a window.

 

You will be introduced to the applications of windowing, chief among them being finding the cumulative sum and calculating moving average.

 
People you will hear from in this session:

Subject Matter Expert:

Pooja Patel

Director (Engineering), Upgrad

 

Pooja is the Director of Engineering at UpGrad and has over 10 years of experience in building robust platforms, both at a large enterprise and at a start-up with lean and agile teams. She is a seasoned technologist and is passionate about bringing together the right mixes of data, science, and software for creating practical and scalable business solutions. Prior to UpGrad, Pooja worked on creating a data-driven TV advertising platform at Simulmedia and a developer workflow automation solution at Cisco Systems. She holds a Master's degree from SUNY Binghamton, in Computer Science and Engineering.

Introduction to Windowing Functions

You have already learned and executed the ‘group by’ clause for collecting facts about certain categories. One thing you shall have noticed while using the group by clause is that it leads to a reduction in the number of rows. It also leads to the loss of the individual properties of the various rows.

 

However, SQL provides for a special clause called the ‘over’ clause. This clause provides the group characteristics to be displayed in the form of a new column. This leads to the preservation of individual characteristics of different rows while displaying the group characteristics simultaneously.

 

Please find the SQL file we will be using during the course of this session.

Following is the code used in the above-described query

 

select ssn, concat(fname, ' ', lname) as emp_name, dno, salary ,

sum(salary) over () as total_salary,

sum(salary) over (partition by dno) as dep_salary

from employee

order by dno;

 

Each window operation in the query is signified by the inclusion of an OVER clause that specifies how to partition query rows into groups for processing by the window function:

 

    The first OVER clause is empty, which treats the entire set of query rows as a single partition. The window function thus produces a global sum but does so for each row.

    The second OVER clause partitions rows by department number, producing a sum per partition (per department). The function produces this sum for each partition row.
    
    Questions:1/1
 
Window function

Explain the output of the following set of queries:

select essn, pno, hours,

avg(hours) over() as Average,

hours*100/sum(hours) over (partition by pno) as contribution_project,

hours*100/sum(hours) over (partition by essn) as contribution_personal

from works_on

order by essn;

lightbulb_outline

Suggested Answer

Average provides the average of all the 'hours' entries in the table works_on. contribution_project shows how much of the project's total hours is provided by the employee. contribution_personal shows the percentage of employee's total time dedicated to a particular project


rames

In the last section, you were introduced to the concept of windowing functions and windows. You learned the use of basic aggregate functions, like sum in windowing.

 

In this section, you will learn about the concept of frames and how frames move while a query is executed. You will learn how to implement the concept of moving average in SQL.

The following query demonstrates the use of moving frames to compute running totals within each department. Similar queries can be used to determine rolling averages computed from the current row and the rows that immediately precede and follow it.

 

select ssn, concat(fname, ' ', lname) as emp_name, dno, salary,

sum(salary) over (partition by dno order by ssn rows unbounded preceding) as cumulative_total,

sum(salary) over (partition by dno order by ssn rows between 1 preceding and 1 following )   as one_above_and_one_below

from employee;


We can also use non-arithmetic functions in windowing.
 

select ssn, concat(fname, ' ', lname) as emp_name, dno, salary,

first_value(salary) over (partition by dno order by ssn rows unbounded preceding) as first_val,  

nth_value(salary,2) over (partition by dno order by ssn rows unbounded preceding) as second_val

from employee;


We can also use non-arithmetic functions in windowing.
 

select ssn, concat(fname, ' ', lname) as emp_name, dno, salary,

first_value(salary) over (partition by dno order by ssn rows unbounded preceding) as first_val,  

nth_value(salary,2) over (partition by dno order by ssn rows unbounded preceding) as second_val

from employee;

Questions:2/2
 
 
Window function

Predict the output of the following piece of code

 

select concat(fname,' ',lname) as Name ,

min(salary) over(partition by dno) as Result

from employee

order by dno desc;

Name of employees with the minimum salary in their respective department
Feedback :

min(salary) over (partition by dno) gives the minimum salary in the particular department
Correct

Name of employees along with their salary

Name of employees along with the maximum salary in their department

An error message is displayed

Named Windows

In the previous session, you learnt that we can use multiple window functions in the same query. You shall have noticed that in one of the queries we used the same window in both the window functions. This makes the code bulkier and difficult to tweak as and when the need arises. In this section, Pooja will teach you the concept of creating, storing and using named windows.

A WINDOW clause is useful for queries in which multiple OVER clauses would otherwise define the same window. Instead, you can define the window once, give it a name, and refer to the name in the OVER clauses. Consider this query, which defines the same window multiple times:

 

select ssn, salary,

row_number()     over (order by salary ) as 'row_number',

rank()           over (order by salary ) as 'rank',

dense_rank()     over (order by salary ) as 'dense_rank'

from employee;


select ssn, salary,

row_number()     over w as 'row_number',

rank()           over w as 'rank',

dense_rank()     over w as 'dense_rank'

from employee

window w as (order by salary);

 

A named window also makes it easier to experiment with the window definition to see the effect on query results. You need only modify the window definition in the WINDOW clause, rather than multiple OVER clause definitions.

Questions:1/1
 
Named windows

Predict the output of the following SQL query.

 

select concat ( fname, ' ', lname) as name , ssn,

row_number() over w as 'row_number' ,

rank() over w as 'rank'

from employee

window w as (order by concat(fname, ' ', lname));

Rank the employees alphabetically
Correct

Rank the employees in the opposite order of the alphabetical order

An error message is displayed

Rank the employees in the ascending order of social security number (ssn).

Window Functions' Restrictions

So far in the session, you have learned the various applications of window functions. However, there are a few important caveats to know before you start using window functions extensively.

 

    Window functions cannot be used in UPDATE or DELETE statements to update rows.

    DISTINCT command is not allowed with windowing.

    Nested windowing functions are not allowed.

    Dynamic frames are not allowed.
    
    Session Summary

We began this session with an introduction to Windowing and discussion on the ‘over’ clause. The over clause is used to specify the window on which the function executes.

 

We learned about the use of aggregate functions like sum, max, min, average along with non- aggregate functions like rank, row_number in windowing functions.

 

You learnt the concept of named windows to make the code more concise and easier to understand. We understood the shortcoming of the windowing functions to finish the session.

