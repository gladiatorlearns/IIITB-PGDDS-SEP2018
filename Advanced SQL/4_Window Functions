Introduction

So far you’ve learned how to change a table structure. You learned the use of alter table command and the use of add, drop and set commands.

 
In this session

You’ll be introduced to the concept of windowing functions. You’ll learn about the use of over clause, used to implement windowing. You’ll also learn about the concept of frames and how the frames move within a window.

 

You will be introduced to the applications of windowing, chief among them being finding the cumulative sum and calculating moving average.

 
People you will hear from in this session:

Subject Matter Expert:

Pooja Patel

Director (Engineering), Upgrad

 

Pooja is the Director of Engineering at UpGrad and has over 10 years of experience in building robust platforms, both at a large enterprise and at a start-up with lean and agile teams. She is a seasoned technologist and is passionate about bringing together the right mixes of data, science, and software for creating practical and scalable business solutions. Prior to UpGrad, Pooja worked on creating a data-driven TV advertising platform at Simulmedia and a developer workflow automation solution at Cisco Systems. She holds a Master's degree from SUNY Binghamton, in Computer Science and Engineering.

Introduction to Windowing Functions

You have already learned and executed the ‘group by’ clause for collecting facts about certain categories. One thing you shall have noticed while using the group by clause is that it leads to a reduction in the number of rows. It also leads to the loss of the individual properties of the various rows.

 

However, SQL provides for a special clause called the ‘over’ clause. This clause provides the group characteristics to be displayed in the form of a new column. This leads to the preservation of individual characteristics of different rows while displaying the group characteristics simultaneously.

 

Please find the SQL file we will be using during the course of this session.

Following is the code used in the above-described query

 

select ssn, concat(fname, ' ', lname) as emp_name, dno, salary ,

sum(salary) over () as total_salary,

sum(salary) over (partition by dno) as dep_salary

from employee

order by dno;

 

Each window operation in the query is signified by the inclusion of an OVER clause that specifies how to partition query rows into groups for processing by the window function:

 

    The first OVER clause is empty, which treats the entire set of query rows as a single partition. The window function thus produces a global sum but does so for each row.

    The second OVER clause partitions rows by department number, producing a sum per partition (per department). The function produces this sum for each partition row.
    
    Questions:1/1
 
Window function

Explain the output of the following set of queries:

select essn, pno, hours,

avg(hours) over() as Average,

hours*100/sum(hours) over (partition by pno) as contribution_project,

hours*100/sum(hours) over (partition by essn) as contribution_personal

from works_on

order by essn;

lightbulb_outline

Suggested Answer

Average provides the average of all the 'hours' entries in the table works_on. contribution_project shows how much of the project's total hours is provided by the employee. contribution_personal shows the percentage of employee's total time dedicated to a particular project
