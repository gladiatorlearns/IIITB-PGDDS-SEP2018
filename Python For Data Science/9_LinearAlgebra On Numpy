Basic Linear Algebra Operations
NumPy provides the np.linalg package to apply common linear algebra operations, such as:

np.linalg.inv: Inverse of a matrix
np.linalg.det: Determinant of a matrix
np.linalg.eig: Eigenvalues and eigenvectors of a matrix
Also, you can multiply matrices using np.dot(a, b).

 

Note: The Python notebook used in this section can be downloaded from Introduction section.

Linear algebra
Description
Find the inverse, eigenvalues, eigenvectors, determinants of a given matrix 'array_1'.

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]
list_3 = input_list[2]

import numpy as np
array_1 = np.array([list_1,list_2,list_3])
eigen = np.linalg.eig(array_1)
inv = np.linalg.inv(array_1)
det = np.linalg.det(array_1)
print(eigen)
print(inv)
print(det)

Apart from these basic functions, there are a lot of other linear algebra operations that can be performed in NumPy. These functions come built-in in another package called SciPy. SciPy is built on top of NumPy, so you can use both of them hand in hand. Many of the functions in SciPy are quite advanced and usually aren’t of much use. But, you can still go through the following cheat sheet of SciPy functions provided below:

SciPy Cheat Sheet - https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_SciPy_Cheat_Sheet_Linear_Algebra.pdf

What is the difference between the output of 'np.linalg.eig()' and 'np.linalg.eigvals()'?
np.linalg.eig(): Returns both the eigenvalues and eigenvectors.

np.linalg.eigvals(): Returns just the eigenvalues.

What is the major difference between element-wise matrix multiplication and multiplication using numpy.dot()?
Let's take an example for the following two arrays:

a = [[1, 2],  

       [3, 4]]

b = [[5, 6],

       [7, 8]]

a * b specifies matrix multiplication. And its output would be:

[[ 5, 12],

 [21, 32]]

Notice here that every element in the first array is multiplied with the element in its corresponding position in the second array. This is what matrix multiplication does.

Now, np.dot(a, b) specifies the dot product. And its output would be:

[[19, 22],

 [43, 50]]

Note that the dot product is calculated as follows:

[[1*5 + 2*7, 1*6 + 2*8],

 [3*5 + 4*7, 3*6 + 4*8]]
 
 Summary
To conclude, in this session, you learnt about the various operation you may do on a NumPy array. The various operations that you learnt about are —

Manipulating arrays which can be done using reshape().
Stacking and splitting arrays which are similar to merging and appending and can be done using hstack(), vstack().
Applying user-defined functions on an array to vectorise the code using np.vectorize().
Performing linear algebra operations on an array like Inverse, Determinant or eigenvalues of a matrix.
