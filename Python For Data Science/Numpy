Introduction

Welcome to this module on Python for Data Science.

  
In this module

In this module, we will be covering NumPy and Pandas that are the most used Python libraries for Data Science.

 

This module will teach you the basics of NumPy, which is the fundamental package for scientific computing in Python. NumPy consists of a powerful data structure called multidimensional arrays. Pandas is another powerful Python library that provides fast and easy data analysis platform. You will also learn about 'Data Visualisation in Python' in a separate module.

 
Pre-requisite for this Module

The students are expected to have gone through "Intro to Python" module before beginning with this module.

 
In this session

    Understand advantages of vectorised code using Numpy (over standard Python ways)
    Create NumPy arrays
        Convert lists and tuples to NumPy arrays
        Create (initialise) arrays
    Inspect the structure and content of arrays
    Subset, slice, index and iterate through arrays
    Compare computation times in NumPy and standard Python lists

 
Guidelines for coding console questions

The lectures are interspersed with coding consoles to help you practise writing Python code. You will be given a brief problem statement and some pre-written code. You can write the code in the provided space, verify your answer using test cases, and submit when you are confident about the answer.

 

Note that the coding console questions are non-graded. Some instructions for these questions are as follows:

    Ignore the pre-written code on the console. Please don't change it.
    Write your answer where you're asked to write it.

    You may run and verify your codes any number of times.

 
People you will hear from in this session

Subject Matter Expert
Prof. G. Srinivasaraghavan
Professor, IIIT-B

Rated as one of the top 10 academicians in the field of Data Science in India, Prof. Raghavan is an authoritative figure and a delight to learn from.

NumPy Basics

NumPy is a library written for scientific computing and data analysis. It stands for numerical python.

 

The most basic object in NumPy is the ndarray, or simply an array which is an n-dimensional, homogeneous array. By homogenous, we mean that all the elements in a NumPy array have to be of the same data type, which is commonly numeric (float or integer).

 

You can download the Python notebooks used in the lecture from the link below. It is recommended that you keep executing the commands on your computer at pace with the lecture.


Lets now learn about 'arrays' which are the basic data structures in NumPy, we will also learn how to efficiently operate on NumPy arrays.

Advantages of NumPy

What is the use of arrays over lists, specifically for data analysis? Putting crudely, it is convenience and speed :

    You can write vectorised code on NumPy arrays, not on lists, which is convenient to read and write, and concise.
    NumPy is much faster than the standard Python ways to do computations.

Vectorised code typically does not contain explicit looping and indexing etc. (all of this happens behind the scenes, in precompiled C-code), and thus it is much more concise.

 

Let's see more in the next lecture.

Questions:1/1
Creating a 3*3 array
Description
Create a 3*3 array using list_1 = [1,2,3] list_2 = [4,5,6] list_3 = [7,8,9]
Execution time limit

5 seconds

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]
list_3 = input_list[2]

import numpy as np
array_1 = np.array([list_1,list_2,list_3])

print(array_1)

Element Wise Multiplication
Description
Perform an element-wise multiplication using list_1 = [2,3,4,5] list_2 = [7,8,9,6] and obtain the output as a list. 
Hint: Convert the list to an array and after multiplication convert it back to a list.
Execution Time Limit
5 seconds


Q. What does the stub in the beginning of the code do?
The following code:

import ast,sys
input_str = sys.stdin.read()

is used to read the input from the standard input/output stream. It will be present in almost all the coding questions that are present because when you're writing code in any console, you need to read the input from and write the output to the standard I/O stream.

Also, note that the variable name in the second line is 'input_str'. This is because all the inputs provided to the standard I/O stream are read as a string and you need to convert them as required. This will also be done for all the codes. For example, the code in this page requires you to read a list. Hence, the following code is used to convert the read input from string to list:

input_list = ast.literal_eval(input_str)

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]

import numpy as np
array_1 = np.array(list_1)
array_2 = np.array(list_2)
array_3 = array_1*array_2

print(list(array_3))
