Multidimensional Arrays
Multidimensional arrays are indexed using as many indices as the number of dimensions or axes. For instance, to index a 2-D array, you need two indices - array[x, y].

Each axes has an index starting at 0. The following figure shows the axes and their indices for a 2-D array.



2D Array
Description
From a 2D array extract all the rows of the 2 column.
Hint: 2 column will have index value as 1.
Execution Time Limit
5 seconds

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
import numpy as np
array_2d =np.array(input_list) 

print(array_2d[:,1])


Border Rows and Columns
Description
Extract all the border rows and columns from a 2-D array.

Format:
Input: A 2-D Python list
Output: Four NumPy arrays - First column of the input array, first row of the input array, last column of the input array, last row of the input array respectively.

Example:
Input 1:
[[11 12 13 14]
 [21 22 23 24]
 [31 32 33 34]]
Output 1:
[11 21 31]
[11 12 13 14]
[14 24 34]
[31 32 33 34]
Execution Time Limit
5 seconds

# Read the input list
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)

import numpy as np

# Convert the input list to a NumPy array
array_2d =np.array(input_list)

# Extract the first column, first row, last column and last row respectively using
# appropriate indexing
col_first = array_2d[:,0]
row_first = array_2d[0,:]
col_last = array_2d[:,-1]
row_last = array_2d[-1,:]

print(col_first)
print(row_first)
print(col_last)
print(row_last)

upgrad solution-
# For a video solution of the code, copy-paste the following link in your browser:
# https://youtu.be/ekELUEdT63E

# Read the input list
import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
import numpy as np

# Convert the input list to a NumPy array
array_2d =np.array(input_list)

# Extract the number of rows and columns of the array
rows = len(array_2d[:, 0])
cols = len(array_2d[0, :])

# Extract the first column, first row, last column and last row respectively using
# appropriate indexing
col_1 = array_2d[:, 0]
row_1 = array_2d[0, :]
col_last = array_2d[:, cols-1]
row_last = array_2d[rows-1, :]

print(col_1)
print(row_1)
print(col_last)
print(row_last)
