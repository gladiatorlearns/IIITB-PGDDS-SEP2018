Subset, Slice, Index and Iterate through Arrays
Let's now look at how to access the elements of an array. For one-dimensional arrays, indexing, slicing etc. is similar to python lists - indexing starts at 0.

Questions:1/2
 
 
Indexing Array
Given an array array_1 = [1 2 3 5 4 6 7 8 5 3 2], what will be the output  of print(array_1[:3])?


[1 2 3 5]

[1 2 3]
Correct

[2 3 5]

Questions:2/2
 
 
Indexing Array
Given an array array_1 = [1 2 3 5 4 6 7 8 5 3 2], what will be the output  of print(array_1[0::2])?


[1 2]


[1 3 4 7 5 2]

Correct

[1 5 7 3]

Given a 2D NumPy array, 'a', what is the difference between the two commands: a[:, 1] and a[:, 1:2]?
Suppose you have the following NumPy array 'a':

[[1 2 3]

 [4 5 6]

 [7 8 9]]

The output for a[:, 1] would be:

[2 5 8]

whereas the output for a[:, 1:2] would be:

[[2]

 [5]

 [8]]

Notice that in the first case it just selects the column indexed '1' and outputs it as a 1D array whereas in the second case, it prints the second column whilst keeping the original dimensions intact, i.e. the output is a 2D array as well. This happens because in the first case you are just specifying one column while in the second case you're specifying a sequence of columns, even though the sequence is one unit long.


Why does the appearance of output change when we use the print command?
For example just specifying:

np.ones((2, 2), dtype = int)

prints the following:

array([[1, 1],

           [1, 1]])

Whereas, passing the above command to the print function, i.e.:

print(np.ones((2, 2), dtype = int))

prints the following:

[[1 1]

 [1 1]]

This is because, print is the Python Statement that will print the value of what is there in the variable. Whereas when you just give the variable name, it is being printed by the feature of Jupyter Notebook. Generally, Jupyter Notebook feature prints it in MD (Markup Document) Format which is more of a Rich Text format and format it in more readable. In Python it knows that it is an array and prints it as an array, whereas the Jupyter Notebook just prints the individual elements as a formatted text.

You will see this difference quite visibily while working with DataFrames in Pandas.


