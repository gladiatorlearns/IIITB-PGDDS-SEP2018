Order by Clause
You have used and executed the basic SELECT queries on the employee table, among others. There is one thing that must have caught your eye — all the records retrieved through the SELECT query do not necessarily follow an order, i.e.
they do not appear in alphabetical, increasing or decreasing order by default.

Aggregate Functions
As a data analyst, you would frequently prepare reports which present an overall picture of the data in hand. This task usually includes calculating sums, averages, finding highest and lowest, counting the qualifying records, etc.

In other words, you will often need to find aggregate values of certain variables like the average age, total salary of employees, the number of males or females etc. You know how to do all these things in R.

Having Clause
Suppose your manager asks you to count all the employees whose salary is more than the average salary in that particular department. Now, intuitively, you know that two aggregate functions would be used here — count() and avg(). You decide to apply the where condition on the average salary of the department, but to your surprise, the query fails. In fact, you should try writing this query before moving ahead.

Nested Queries
You know that a database is a collection of multiple related tables. While generating insights from the data, you may need to refer to these multiple tables in a query. There are two ways to deal with such types of queries:

Joins

Nested queries/Subqueries

To summarise, you learnt nested sub-queries which are typically used when you have to select columns from one table based on filter conditions from another table. In such cases, you put a sub-query inside the 'where' clause instead of a certain value. In other words, if you want to select columns 'a' and 'b' from table_1 and the condition is to be applied on table_2, then the general structure of the query will is:

 

select a, b 
from table_1
where c = (select d from table_2 where e = x);
 

The other typical use case of nested queries is when you have to apply a filter condition on an aggregated value, for example, display two columns a, b from table_1 such that a is greater than the average value of c:

 

select a, b 
from table_1
where c > (select avg(c) from table_1);
 
 To summarise, join is a way to retrieve data from multiple tables. The most common join is the inner join, which selects only those rows from two tables where the common column has the same value. The general structure of an inner join statement is as follows: 

 

select * 
from table_1 inner join table_2 
on table_1.column_x = table_2.column_y;

Multi Join
You previously learnt about the inner joins and writing the join queries. You must have noticed that only two tables were referred to in the join. But what if you have a complicated problem statement which needs referencing three, four, five or more tables? You can write the join queries for such situations using multi-joins.

To summarise multi-joins, you can join multiple tables using the common attributes between pairs of tables. This is possible because the result of a join is also a table which you can join further to another table (with a common attribute).

 

For example, you wanted to retrieve columns from the tables employee and project, but there is no common attribute in these tables.  Thus, you join the employee table with works_on using the common attribute 'ssn'. The result of this join is then further joined to the project table.   

 Outer Join
In an inner join, all the records from the first table are referred to and joined together. However, there may be situations when you need to join the records based on a second table. This lecture will cover the concept of outer join which allows you to accomplish such tasks.

To summarise, an outer join is used when you want to display the rows in one table even if they do not have a corresponding entry in the other table. For example, if you inner join the employee table with the dependent table,  you will get only those employees who have at least one dependent. To avoid this 'loss of information' you can use an outer join. 

 

Also, the outer join is of two types - left outer join and right outer join. It doesn't really matter which table you treat as left and right, i.e. you can choose the one you are more comfortable with.



Additional Reading
It is recommended that you refer to the following links specific to MySQL and attempt the questions given on this page.

Grouping data http://www.mysqltutorial.org/mysql-group-by.aspx

Having clause http://www.mysqltutorial.org/mysql-having.aspx

Nested queries and subqueries http://www.mysqltutorial.org/mysql-subquery/

Order by clause http://www.mysqltutorial.org/mysql-order-by/

Natural Sorting  http://www.mysqltutorial.org/mysql-natural-sorting/

Joining tables https://www.techonthenet.com/mysql/joins.php

Inner join http://www.mysqltutorial.org/mysql-inner-join.aspx

Left join http://www.mysqltutorial.org/mysql-left-join.aspx

Union Operation  http://www.mysqltutorial.org/sql-union-mysql.aspx

Intersect Operation http://www.mysqltutorial.org/mysql-intersect/
