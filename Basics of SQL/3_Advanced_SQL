Order by Clause
You have used and executed the basic SELECT queries on the employee table, among others. There is one thing that must have caught your eye — all the records retrieved through the SELECT query do not necessarily follow an order, i.e.
they do not appear in alphabetical, increasing or decreasing order by default.

Aggregate Functions
As a data analyst, you would frequently prepare reports which present an overall picture of the data in hand. This task usually includes calculating sums, averages, finding highest and lowest, counting the qualifying records, etc.

In other words, you will often need to find aggregate values of certain variables like the average age, total salary of employees, the number of males or females etc. You know how to do all these things in R.

Having Clause
Suppose your manager asks you to count all the employees whose salary is more than the average salary in that particular department. Now, intuitively, you know that two aggregate functions would be used here — count() and avg(). You decide to apply the where condition on the average salary of the department, but to your surprise, the query fails. In fact, you should try writing this query before moving ahead.

Nested Queries
You know that a database is a collection of multiple related tables. While generating insights from the data, you may need to refer to these multiple tables in a query. There are two ways to deal with such types of queries:

Joins

Nested queries/Subqueries

To summarise, you learnt nested sub-queries which are typically used when you have to select columns from one table based on filter conditions from another table. In such cases, you put a sub-query inside the 'where' clause instead of a certain value. In other words, if you want to select columns 'a' and 'b' from table_1 and the condition is to be applied on table_2, then the general structure of the query will is:

 

select a, b 
from table_1
where c = (select d from table_2 where e = x);
 

The other typical use case of nested queries is when you have to apply a filter condition on an aggregated value, for example, display two columns a, b from table_1 such that a is greater than the average value of c:

 

select a, b 
from table_1
where c > (select avg(c) from table_1);
 
