Order by Clause
You have used and executed the basic SELECT queries on the employee table, among others. There is one thing that must have caught your eye — all the records retrieved through the SELECT query do not necessarily follow an order, i.e.
they do not appear in alphabetical, increasing or decreasing order by default.

Aggregate Functions
As a data analyst, you would frequently prepare reports which present an overall picture of the data in hand. This task usually includes calculating sums, averages, finding highest and lowest, counting the qualifying records, etc.

In other words, you will often need to find aggregate values of certain variables like the average age, total salary of employees, the number of males or females etc. You know how to do all these things in R.

Having Clause
Suppose your manager asks you to count all the employees whose salary is more than the average salary in that particular department. Now, intuitively, you know that two aggregate functions would be used here — count() and avg(). You decide to apply the where condition on the average salary of the department, but to your surprise, the query fails. In fact, you should try writing this query before moving ahead.

Nested Queries
You know that a database is a collection of multiple related tables. While generating insights from the data, you may need to refer to these multiple tables in a query. There are two ways to deal with such types of queries:

Joins

Nested queries/Subqueries
