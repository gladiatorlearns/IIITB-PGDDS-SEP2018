Problem 1 =
Program to remove empty spaces from given string - 

Desc - Remove the leading spaces from the string  input_str = '         This is my first code'

# Reading the input as a string; ignore the following two lines
import ast, sys
input_str = sys.stdin.read()

# Write your code here
final_str = input_str.lstrip()
print(final_str)

String Split -

Problem - Description
Split the string input_str = 'Kumar_Ravi_003' to the person's second name, first name and unique customer code. In this example, second_name= 'Kumar', first_name= 'Ravi', customer_code = '003'.

A sample output of the input 'Kumar_Ravi_003' is:

Ravi
Kumar
003

 
Note that you need to print in the order first name, last name and customer code.

Solution - 
import ast,sys
input_str = sys.stdin.read()
splist_list=input_str.split('_')
first_name = splist_list[1]
second_name = splist_list[0]
customer_code = splist_list[2]
print(first_name)
print(second_name)
print(customer_code)


or alternatively

import ast,sys
input_str = sys.stdin.read()
first_name = input_str[6:10]
second_name = input_str[0:5]
customer_code =input_str[11:14]
print(first_name)
print(second_name)
print(customer_code)

List_remove_append
Description
Remove SPSS from input_list=['SAS', 'R', 'PYTHON', 'SPSS'] and add 'SPARK' in its place.

import ast,sys
input_list = (sys.stdin.read()).split(',')
input_list.pop()
input_list.append('SPARK')
print(input_list)

string to list conversion
Description
Convert a string input_str = 'I love Data Science & Python' to a list by splitting it on ‘&’. The sample output for this string will be:

['I love Data Science ', ' Python']


import ast,sys
input_str = sys.stdin.read()

output_list = input_str.split('&')
print(output_list)

List to String
Description
Convert a list ['Pythons syntax is easy to learn', 'Pythons syntax is very clear'] to a string using ‘&’. The sample output of this string will be:

Pythons syntax is easy to learn & Pythons syntax is very clear


Note that there is a space on both sides of '&' (as usual in English sentences).

import ast,sys
input_str = (sys.stdin.read()).split(',')

string_1 = input_str[0]+" & "+input_str[1]
print(string_1)

Nested List
Description
Extract Python from a nested list input_list =  [['SAS','R'],['Tableau','SQL'],['Python','Java']]

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)

answer = input_list[2][0]
print(answer)


Tuple
Description
Add the element ‘Python’ to a tuple input_tuple = ('Monty Python', 'British', 1969). Since tuples are immutable, one way to do this is to convert the tuple to a list, add the element, and convert it back to a tuple.

To learn how to convert a list to a tuple, search for it on Google / Stack Overflow etc.

import ast,sys
input_str = sys.stdin.read()
input_tuple = ast.literal_eval(input_str)
tuple_1=list(input_tuple)
tuple_1.append('Python')
tuple_2=tuple(tuple_1)
# Make sure to name the final tuple 'tuple_2'
print(tuple_2)


Dict_Error
Description
From a Dictionary input_dict={'Name': 'Monty', 'Profession': 'Singer' }, get the value of a key ‘Label’ which is not a part of the dictionary, in such a way that Python doesn't hit an error. If the key does not exist in the dictionary, Python should return 'NA'.

import ast,sys
input_str = sys.stdin.read()
input_dict = ast.literal_eval(input_str)

answer = input_dict.get('Label','NA')
print(answer)

Getting a Value from a Dictionary.
Description
Extract the company headed by Tim Cook from the dictionary {'Jack Dorsey': 'Twitter', 'Tim Cook': 'Apple','Jeff Bezos': 'Amazon','Mukesh Ambani': 'RJIO'}

import ast,sys
input_str = sys.stdin.read()
input_dict = ast.literal_eval(input_str)

name = input_dict['Tim Cook']
print(name)


List of Values in a Dictionary.
Description
Create a SORTED list of all values from the dictionary input_dict = {'Jack Dorsey' : 'Twitter' , 'Tim Cook' : 'Apple','Jeff Bezos' : 'Amazon' ,'Mukesh Ambani' : 'RJIO'}

import ast,sys
input_str = sys.stdin.read()
input_dict = ast.literal_eval(input_str)

value_list = input_dict.values()
print(sorted(value_list))

Set_diff
Description
Find the difference, using difference and symmetric_difference, between two given lists - list1 and list2.

First, convert the lists into sets and store them as set_1 and set_2. Then store the difference and symmetric difference in answer_1 and answer_2 respectively. Print both the answers as sorted lists, i.e. convert the final sets to lists, sort it and then return it.

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
list_1 = input_list[0]
list_2 = input_list[1]

set_1 = set(list_1)
set_2 = set(list_2)
answer_1 = list(sorted(set_1.difference(set_2)))
answer_2 = list(sorted(set_1.symmetric_difference(set_2)))

print(answer_1)
print(answer_2)

To conclude, in this session, you learnt about the most important Python data structures, and you now have an idea of how they can be used. The various types of data structures that you learnt about are —

Lists
Tuples
Dictionaries
Sets
 

The notes for this session are available in the format of a .ipynb file, with demonstrations to help you understand the structures' functionalities. These notes can be downloaded from below.

Control Structures

Control structures are the essence of programming since they help computers do what they do best — automate repetitive tasks intelligently. The most common control structures are if-else statements, for and while loops, and (specific to Python) list and dictionary comprehensions. This session will cover all of these.

 

Another crucial thing you will learn in Session 2 is to write your own functions. Almost every powerful program — whether a web app or a machine learning algorithm — is basically a set of functions written to perform specific tasks. 

 

In this session
Control structures
If-elif-else
For loop
While loop
List comprehensions
Dictionary comprehensions
Functions
Map
Filter
Reduce

If-Else
Description
Write a code to check if the string in input_str starts with a vowel or not. Print capital YES  or NO.

For example, if input_str = 'analytics' then, your output should print 'YES'.

import ast,sys
input_str = sys.stdin.read()

vowels={'a','e','i','o','u'}
if input_str[0] in vowels:
    print('YES')
else:
    print('NO')
    
 The most basic control structure is a conditional statement. When you want different operations to be performed when the values of the variable vary, you need conditional statements. In this segment, you will learn about the syntax and functioning of if-else statements.

 

The syntax of an if statement is pretty simple:

if <condition 1>:
    do something
 

The statement needs to be indented with a tab. In Sublime Text, at the bottom right, you can adjust the tab size to be equal to any number of white spaces. A good practice is to make use of four white spaces as the tab size for indentations. Anything outside an indentation is not a part of the if statement. So, for the following statement —

if i>10 and j<8:
    c+=5
print(c)
 

The print statement is not a part of if statement as it is not indented on the if statement. Now, this is how an if-else statement will look:

if <condition 1>:
    do something
else:
    do something else
 

Similarly, you can have the elif statement (In R, this is 'else-if'):

if <condition 1>:
    do something
elif <condition 2>:
    do something else
else:
    do something else
 
 Loops
Looping is an important part of carrying out operations — whether it is looping over a range of numbers, numbers in an array, items in a list, or keys and values in a dictionary, etc. You must be familiar with the use of loops in Python.
 
 Iterations can be over any collection. The iteration in a string goes over each character; however, in lists and tuples, the iteration goes over each item in turn, and in dictionaries, you can iterate over both keys and values or any one of them. Another keyword — 'enumerate' — can be used to introduce another iterating variable that counts the iterations. Note that it starts with 0.

 

Other commands that can be used are 'break', 'continue', and 'pass'. To see the differences between them, use the following piece of code:

 

for i in range(100):
    print(i)
    if i>50:
        break
        print("Hello")
 

Notice how the break command breaks out of the loop once i = 51, and it is used to exit the iteration. Replace 'break' with pass'. You will now see that after the value of i exceeds 50, the string "Hello" is printed. 'Pass' does nothing and allows the remaining code to be executed. If you now replace 'pass' with 'continue', you will notice that the keyword "Hello" isn't printed at all, but the values of i are. The reason behind this is that 'continue' exits that iteration and moves to the next one, not allowing anything below it to be executed. 'Pass', on the other hand, allows for statements to be executed below it in the loop.

 

A while loop is used when you aren't sure of the number of iterations you need to have. It should be used when your results depend on the value of a variable.


Python comprehensions  - are syntactic constructs that enable sequences to be built from other sequences in a clear and concise manner. Here, we will cover list comprehensions and dictionary comprehensions.

Creating a List Comprehension
Description
You are given an integer 'n' as the input. Create a list comprehension containing the squares of the integers from 1 till n^2 (including 1 and n), and print the list. 

For example, if the input is 4, the output should be a list as follows:

import ast, sys
n = int(input())
square_list=[x**2 for x in range(1,n+1)]
print(square_list)

List Comprehensions
Description
Extract the words that start with a vowel from a list input_list=[wood, old, apple, big, item, euphoria] using list comprehensions.

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
vowel_list = ['a','e','i','o','u']
list_vowel=[word for word in input_list if word[0].lower() in vowel_list]
print(list_vowel)

Using list comprehensions is much more concise and elegant than explicit for loops. An example of creating a list using a loop and a comprehension is as follows:

# using a for loop

product_list = []
for i in range(10):
    for j in range(10,20):
        product_list.append(i*j)
 

The same code using a list comprehension is as follows:

# using list comprehension
product_list = [ i*j for i in range(10) for j in range(10,20) ]
 
 Dictionary Comprehension
Description
You are given an integer input n.

Write a program to generate a dictionary that contains the key-value pairs i: i**2 where ' i ' is an integer number from 1 to n (both 1 and n included). 

For example, if the input is n=8, the output should be a dictionary as follows:

{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}

import ast,sys
n = int(input())
dictionary = {x: x**2 for x in range(1,n+1)}
print(dictionary)

List Comprehension
What will the output of the following code be?

print([i+j for i in "abc" for j in "def"])
 
 AnS -

['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']

Dictionary Comprehension
What will the output of the following code be?

d = {x.upper(): x*3 for x in 'acbd'}
print(d)

{'A': 'aaa', 'C': 'ccc', 'B': 'bbb', 'D': 'ddd'}


Functions
 Functions, as the name suggests, perform a task or function. 
 They are blocks of code that can be reused at various parts of the code as well as various files.
 When you import any package and call any of its methods, you make use of the functions defined in it. 
 This makes determining the use of each portion of the code significantly easier.

Function
Description
Create a function squared(),  which takes x and y as arguments and returns the x**y value. For e.g., if x = 2  and y = 3 , then the output is 8.

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
x = int(input_list[0])
y = int(input_list[1])
def squared(x,y):
    return x**y
print(squared(x,y))

Similar to if-else and the for loop, the parts belonging to a function are indented on it. There is no need for brackets except for the input parameters that are specified just after the function name. In the next video, you will see the use of 'lambda' expressions, which are another way to make use of functions.

 

Lambda expressions are also another way of defining functions but with a difference. They aren't capable of multiple expressions and can only handle single expressions. The format of lambda statements is as follows:

function_name  = lambda <space>  input_parameters  :  output_parameters

Eg: join_by_comma = lambda x : ','.join(x)
 

This will create a function called join_by_comma and will return a string with each item of the list separated by a comma.

Functions
What is the output of the following program?

def say(message, times = 1):
    print(message * times)

say('Hello')
say('World', 5)

ANS - Hello WorldWorldWorldWorldWorld
Feedback : For some functions, you may want to make some parameters optional and use default values in case the user does not want to provide values for them. This is done with the help of default argument values. You can specify default argument values for parameters by appending to the parameter name in the function definition of the assignment operator (=), followed by the default value. The function 'say' is used to print a string as many times as specified. If you don’t supply a value, then by default, the string is printed just once. You achieve this by specifying a default argument value of 1 to the parameter ‘times’. In the first usage of ‘say’, you supply only the string, and it prints the string once. In the second usage of ‘say’, you supply both the string and an argument 5, stating that you want to say the string message five times.

Id Function
Which of the following is the use of the id() function in Python?


Every object doesn’t have a unique id, and hence, id() returns a cluster of similar objects.

Id returns the identity of the object.
Feedback : Python has a unique identification number for each object created, id() return the id number of that object.

Lambdas
What is the output of this program?

min = (lambda x, y: x if x < y else y)
min(101*99, 102*98)

Lambda
Description
Create a lambda function 'greater', which takes two arguments x and y and return x if x>y otherwise y.
If x = 2 and y= 3, then the output should be 3.

input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
a = int(input_list[0])
b = int(input_list[1])
greater=lambda a,b: a if a > b else b

print(greater(a,b))

Map, Filter, and Reduce
Map is a function that works like list comprehensions and for loops. It is used when you need to map or implement functions on various elements at the same time.

Map Function
Description
Using the Map function, create a list 'cube', which consists of the cube of numbers in input_list.

For e.g. if the input list is [5,6,4,8,9], the output should be [125, 216, 64, 512, 729].

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)

cube = list(map(lambda x: x**3,input_list))
print(cube)

Map Function
Description
Using the function Map, count the number of words that start with ‘S’ in input_list.

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
print(len(list(filter(None,list(map(lambda x: x if x[0].upper() == 'S' else None,input_list))))))

Map Function
Description
Create a list ‘name’ consisting of the combination of the first name and the second name from list 1 and 2 respectively. 

For e.g. if the input list is:
[ ['Ankur', 'Avik', 'Kiran', 'Nitin'], ['Narang', 'Sarkar', 'R', 'Sareen']]

the output list should be the list:
['Ankur Narang', 'Avik Sarkar', 'Kiran R', 'Nitin Sareen']

import ast,sys
input_str = sys.stdin.read()
input_list = ast.literal_eval(input_str)
first_name = input_list[0]
last_name = input_list[1]
name = list(map(lambda x,y: x + " " +y,first_name,last_name))
print(name)
