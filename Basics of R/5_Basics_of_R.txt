Introduction
In this module, you’ll get started with the most popular programming language among data scientists - R. This language is widely used for data mining, statistics and data analysis by data analysts, data scientists and professional research analysts.

 

It is very easy to pick up for beginners and is sophisticated enough to perform highly advanced data analysis. That is why this program is primarily based on R. 

 

Note: The graded questions and assignments of this module are not accessible currently. They will be made available after the program launches.

 

Pre-requisites:
This module is designed for beginners with absolutely no experience in R (or other programming languages).

 

If you have worked with R before, you may find the initial segments easy. Nonetheless, you are recommended to go through the segments and write programs to make sure you don’t miss out on anything important.

 

In this session:
This session’s aim is to familiarise yourself with R, so you can pick up the intermediate and advanced sessions easily later.

R Programming Language
Through this lecture, you will realise the importance of programming in data analytics. You will also see how and where R is being used by data scientists, as well as understand the reasons for its popularity.

Now, in order to ensure effective learning, the learning path of R is broken down into 3 pieces. Next, Rohit will walk you through your roadmap in learning this language and becoming an R expert.

Installing R & R-Studio
You need to install both R and R-Studio on your system before actually getting started with R. In this page, you will be guided through the installation process and get introduced to both of them.

 

Install R

Step 1: Download the package relevant to your system (Windows or Mac or Linux) from the CRAN website.   

Step 2: Install R like you normally install any new software package.

 

Now, Install R-Studio

Step 1: Download the R-Studio Desktop package from the R-Studio website.

Step 2: Install R-Studio using user’s setup process.

 

Before you move on, make sure you have installed both R and R-Studio on your system. In this lecture, you will be introduced to different components of R-Studio.

Basic Operations in R
It’s time to start playing with R. You will begin with some basic mathematical operations and commands.

 

Remember to keep imitating the code on the screen. In no time, you would start loving R. Download the R script for this session from the link below and open it as a script file in R-Studio.

Introduction- file_download	and run

You saw how to use R-Studio as a calculator, but you did not learn how to save your results and use them further. Variables will help you do that, which you are going to learn next.

Vectors
All well-designed structures have strong building blocks; as buildings have bricks, similarly datasets in R have vectors.

Datasets have rows and columns. In R, they are frequently stored as vectors which are sequences of elements of the same data type (numeric, character etc.).

One important thing to note is that the index starts from 1 in R, unlike other languages where the index may start from 0. The first element in R is accessed by vector[1]; in some other languages, index of the 1st element is 0.

 

R Smart Programming Tip #1

You can always use Ctrl + R or Ctrl + Enter as a shortcut to run your code from the R script file. 

my_number <- c(3, 8, 9, 10)
my_number
class(my_number)

#To run all the three commands in one go from R script file, select the lines and press Ctrl + R or Ctrl + Enter

You can always add/subtract/multiply/divide two vectors of unequal length, in which recycling is done to perform the particular operation. If the length of larger vector is an integral multiple of the length of shorter vector, this is an example of complete recycling. If the length of the vector is not integral multiple, the operation still gets performed and command gets executed, but R shows a warning - "longer object length is not a multiple of shorter object length". But this should be fine, it's a warning, not an error. This is called partial recycling.

 

Remember that datasets in R are stored as rows and columns of vectors. The more comfortable you are with vectors, the better you are with datasets in R.  

 

Hopefully, you are getting familiar with writing commands in R-Studio. Now is a good time to introduce you to a special learning tool in R-Studio called SWIRL, which will help you practise with R. This lecture will introduce you to SWIRL.

Excited to use SWIRL to practise R better?

 

Install Swirl package in your R console and start playing around with some pre-installed sessions from Swirl course repository. These commands will help you get started.

 

install.packages("swirl")
library(swirl)
swirl()
 

You can start with any of the basic R Programming lessons. If you are stuck somewhere, this link will help you get started in SWIRL. Try exploring SWIRL after installing the package because your first SWIRL lesson is coming up in the next segment.


Factors
As you have just finished learning about vectors, the next thing you should know about is Factors. The factor is a data type in R used to categorise values into discrete categories.

 

For example, say a numeric vector to store the values of a dice roll is created:

dice  <-  c(1, 2, 4, 5, 5, 3, 2, 6, 3, 5, 6, 2, 1, 4, 3, 6, 5, 3, 2, 2, 5) 
 

Since there are only 6 possible values, one can convert the vector into 6-factor levels using a built-in function factor. 

dice_levels <-  factor(dice)
dice_levels
 

If you now look at the new vector levels in the console, R will show all elements of dice vector, along with the 6 levels mentioned.

 

1 2 4 5 5 3 2 6 3 5 6 2 1 4 3 6 5 3 2 2 5

Levels: 1   2   3   4   5   6

 

To learn about factors in detail, open your R script file in R-Studio and continue with the lecture below. Download the R script file for this session, if you haven't done already.

R Smart Programming Tip #2

You can use Ctrl + L to clear your console screen. 

 

So here comes your first lesson on Swirl. You are going to meet a bot, who is going to teach and help you get better at R, especially on vectors & factors.

 

Download the file in the attachment and place it in your working directory. The following set of commands will help you get started with this lesson.

library(swirl)
install_course()       #Select the vectors.swc file after this command
swirl()
 
 Matrices
Vector is a one-dimensional structure, containing data in a sequence.

 

At this point, you might be wondering, if there are structures containing data in a two-dimensional format, such as in rows and columns. In fact that is the case in R. The most basic two-dimensional data structure in R is called a matrix, with all elements in rows and columns having the same data-type. It’s time to learn about matrices.

You learnt about matrices and how to create them in R. But what about accessing different elements of a matrix, and performing different operations in matrices?

 

You’ll do all of that in the next segment when you get introduced to data frames – the better and the most used two-dimensional data structure.  

 

R Smart Programming Tip #3

Always use # to write comments in your R script file - to mention the context about commands and to avoid getting lost in the script file.

# You can write whatever you want after putting a hashtag

# R does not take it seriously

Data Frames
Remember when you read that all well-designed structures have strong building blocks? Data frames are the most important data structures in R, and data frames use vectors as their building blocks.

 

In almost every data analysis project, data frames are used to store data in R. Going through the lecture will enable you to learn more about data frames.

Do you understand the difference between data frames and matrices? Data Frames can have different data types along different columns, while in a matrix, all the columns have the same data type.

 

Now learn how to access different elements, rows, and columns in a data frame and perform different operations on a data frame.

This is the complete_team data frame, used in the lecture. Answer the following questions in the context of this data frame.


Figure 1: "complete_team" Data Frame

You either used built-in data frames or made a data frame by combining vectors. But how can you import data from external files into R and use that for data analytics? Watch this lecture to find out.

 

Download these files - which have been used to import data into R-Studio.

Myfile.txtfile_download	Download
Myfile.csv

Summary:

You learnt how to:

Create data frames using vectors

Use built-in data frames like iris

Access different elements/columns/rows of a data frame

Use rbind and cbind functions to add rows and columns

Import datasets from .txt and .csv files

Lists
You now have an armoury of data structures and data types to work with - vectors, data frames, matrices, characters, factors etc. In a typical R project, you may need to use multiple data structures.

 

Naturally, the next problem to solve is to store them together. This is where lists come in.

 

A List is a one-dimensional data structure – similar in appearance to a vector - each element is in itself a data structure. Each element of a list could be a vector, matrix, data frame or even a list itself.

Summary
In this session, you have covered the basics of R programming, where you got introduced to R programming and started working on the following data structures in R:

 

Vectors –  Data stored in one-dimensional structures, all elements have same data type

Factors –   Data stored in discrete categories/levels

Matrices – Data stored in two-dimensional structures, all elements have same data type

Data Frames – Data stored in two-dimensional structures, all elements in each column have same data type

Lists - Data stored in one-dimensional structures, each element can be a data structure itself

 

Check out where you have reached in your roadmap to becoming an R expert after this session.
 
